package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
)

// SessionManager manages session states
type SessionManager struct {
    sessionID string
    // Add more fields if necessary
}

// GetSessionID retrieves the current session ID
func (sm *SessionManager) GetSessionID() string {
    return sm.sessionID
}

// UpdateSessionID updates the session ID
func (sm *SessionManager) UpdateSessionID(newID string) {
    sm.sessionID = newID
}

var sessionManager = &SessionManager{}

// ProxyChatCompletion handles incoming chat completion requests
func ProxyChatCompletion(w http.ResponseWriter, r *http.Request) {
    var requestBody map[string]interface{}
    if err := json.NewDecoder(r.Body).Decode(&requestBody); err != nil {
        respondWithError(w, http.StatusBadRequest, "Invalid request body")
        return
    }

    stream, ok := requestBody["stream"].(bool)
    if !ok {
        stream = false // Default to non-streaming if not specified
    }

    if stream {
        handleStreamingRequest(w, requestBody)
    } else {
        handleNonStreamingRequest(w, requestBody)
    }
}

// forwardRequest forwards the request to the marketplace node with necessary headers
func forwardRequest(requestBody map[string]interface{}) (*http.Response, error) {
    marketplaceURL := os.Getenv("MARKETPLACE_URL")
    sessionID := sessionManager.GetSessionID()

    reqBodyBytes, err := json.Marshal(requestBody)
    if err != nil {
        return nil, fmt.Errorf("failed to marshal request body: %v", err)
    }

    req, err := http.NewRequest("POST", marketplaceURL, bytes.NewReader(reqBodyBytes))
    if err != nil {
        return nil, fmt.Errorf("failed to create new request: %v", err)
    }

    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("session_id", sessionID)

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("failed to forward request: %v", err)
    }

    return resp, nil
}

// handleStreamingRequest processes streaming requests
func handleStreamingRequest(w http.ResponseWriter, requestBody map[string]interface{}) {
    resp, err := forwardRequest(requestBody)
    if err != nil {
        respondWithError(w, http.StatusInternalServerError, "Failed to forward streaming request")
        return
    }
    defer resp.Body.Close()

    setStreamingHeaders(w)

    flusher, ok := w.(http.Flusher)
    if !ok {
        respondWithError(w, http.StatusInternalServerError, "Streaming unsupported")
        return
    }

    scanner := bufio.NewScanner(resp.Body)
    for scanner.Scan() {
        fmt.Fprintf(w, "%s\n", scanner.Text())
        flusher.Flush()
    }

    if err := scanner.Err(); err != nil {
        respondWithError(w, http.StatusInternalServerError, "Error reading streaming response")
    }
}

// handleNonStreamingRequest processes non-streaming requests
func handleNonStreamingRequest(w http.ResponseWriter, requestBody map[string]interface{}) {
    resp, err := forwardRequest(requestBody)
    if err != nil {
        respondWithError(w, http.StatusInternalServerError, "Failed to forward request")
        return
    }
    defer resp.Body.Close()

    copyHeaders(w, resp.Header)
    w.WriteHeader(resp.StatusCode)
    if _, err := io.Copy(w, resp.Body); err != nil {
        log.Printf("Error copying response body: %v", err)
    }
}

// setStreamingHeaders sets the necessary headers for streaming responses
func setStreamingHeaders(w http.ResponseWriter) {
    w.Header().Set("Content-Type", "text/event-stream")
    w.Header().Set("Cache-Control", "no-cache")
    w.Header().Set("Connection", "keep-alive")
}

// copyHeaders copies headers from the marketplace response to the client response
func copyHeaders(w http.ResponseWriter, headers http.Header) {
    for key, values := range headers {
        for _, value := range values {
            w.Header().Add(key, value)
        }
    }
}

// respondWithError sends an error response to the client
func respondWithError(w http.ResponseWriter, statusCode int, message string) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(statusCode)
    json.NewEncoder(w).Encode(map[string]string{"error": message})
}

func main() {
    http.HandleFunc("/v1/chat/completions", ProxyChatCompletion)
    port := os.Getenv("PORT")
    if port == "" {
        port = "8080"
    }
    log.Printf("Proxy server is running on port %s", port)
    log.Fatal(http.ListenAndServe(":"+port, nil))
}
